# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T14:21:54+00:00



import argparse
import json
import os
from typing import *

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity

from models import CoordSys, CoordUnits, Flux, FluxAtEnergy, Model

app = MCPProxy(
    contact={'x-twitter': 'amentumspace'},
    description='Space has a hostile radiation environment that increases the risk of cancers in humans and malfunctions in spacecraft electronics. The types of space  radiation of primary concern are:\n  <ul>\n    <li>\n        Galactic Cosmic Rays from outside our solar system generated by \n        supernovae and other phenomena;\n    </li>\n    <li>\n        Solar Energetic Particles produced by the Sun during intense and\n        sporadic bursts of activity; and\n    </li>\n    <li>\n        Trapped Radiation: energetic particles confined by Earth\'s magnetic\n        field, usually comprising an inner belt of mostly high energy protons \n        and an outer belt dominated by lower energy electrons and plasma.\n    </li>\n  </ul> \n\nUnderstanding the space radiation environment for a particular mission profile is becoming increasingly important. Commercial off-the-shelf electronic components  that aren\'t resilient to space radiation are now prevalent. Longer duration  missions to cislunar space, Mars, and beyond are placing astronauts at greater  risk of radiation exposure. <br><br>\nAPI requests must contain a key "API-Key" in the header (see code samples). Obtain a key from  <a href=\'https://developer.amentum.io\'>here</a>. <br><br> \nHelp us improve the quality of our web APIs by completing our 2 minute survey <a href="https://www.surveymonkey.com/r/CTDTRBN">here</a>.<br><br>\nAmentum Pty Ltd is not responsible nor liable for any loss or damage of any sort incurred as a result of using the API. <br><br>\nCopyright <a href=\'https://amentum.space\'>Amentum Pty Ltd</a> 2022.\n',
    title='Space Radiation API',
    version='1.1.2',
    servers=[{'url': ''}],
)


@app.get(
    '/gcr/flux_dlr',
    description=""" for the given energy, atomic number, and date.
 """,
    tags=['particle_flux_calculation'],
)
def app_api_endpoints__g_c_r_calculate_dlr_flux(
    year: int, month: int = ..., day: int = ..., z: float = ..., energy: float = ...
):
    """
    Calculate particle flux

    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/trapped/flux_mean',
    description=""" at given coordinates and date-time.
 """,
    tags=['particle_flux_calculation'],
)
def app_api_endpoints__trapped_radiation_calculate_flux_mean(
    model: Model,
    coord_sys: CoordSys = ...,
    coord_units: CoordUnits = ...,
    coord1: float = ...,
    coord2: float = ...,
    coord3: float = ...,
    year: int = ...,
    month: int = ...,
    day: int = ...,
    hour: int = ...,
    minute: int = ...,
    second: int = ...,
):
    """
    Calculate mean particle flux

    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/trapped/flux_percentile',
    description=""" at given coordinates and date-time.
 """,
    tags=['particle_flux_calculation'],
)
def app_api_endpoints__trapped_radiation_calculate_flux_percentile(
    model: Model,
    coord_sys: CoordSys = ...,
    coord_units: CoordUnits = ...,
    coord1: float = ...,
    coord2: float = ...,
    coord3: float = ...,
    year: int = ...,
    month: int = ...,
    day: int = ...,
    hour: int = ...,
    minute: int = ...,
    second: int = ...,
    percentile: int = ...,
):
    """
    Calculate percentile particle flux

    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
